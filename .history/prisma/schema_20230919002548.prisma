// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user related tables
model User {
  id String @id @default(uuid())
  username String
  email String @unique
  provider  String?   
  providerUserId String?
  hash_password String?
  profile_image String?
  verified_email Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedRt String?
  personalInfo PersonalInfo?
  collegeStudent CollegeStudentInfo?
  favoriteSubjects  UserFavoriteSubject[]
}

model PersonalInfo {
  id String @id @default(uuid())
  user  User @relation(fields: [user_id], references: [id], onDelete: Cascade) 
  user_id String @unique 
  first_name String 
  last_name String
  gender Gender @default(NOT_SPECIFIED)
  province Province @default(MAPUTO)
  birth_date DateTime
}

model CollegeStudentInfo {
  id String @id @default(uuid())
  userId String? @unique
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  oauthUserId String? @unique
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  current_year Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, oauthUserId])
}
//school related tables
model School{
  id String @id @default(uuid())
  name String @unique
  acronime String? @unique
  logo String @unique
  address String?
  course Course[]
}
model Course{
  id String @id @default(uuid())
  name String 
  duration Int 
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjects Subject[]
  CollegeStudentInfo CollegeStudentInfo[]
  @@unique([id, schoolId])
}

model Subject{
  id String @id @default(uuid())
  name String 
  description String
  semester Int?
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
  assessments Assessment[] 
  favoriteSubjects  UserFavoriteSubject[]
  @@unique([id, courseId])
}

model Lesson{
  id String @id @default(uuid())
  title String
  url String @unique
  summary String?
  author String?
  classType LessonType
  subjectId String?
  correctionUrl String?
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Assessment{
  id String @id @default(uuid())
  url String @unique
  title String 
  type AssessmentType
  period AssessmentPeriod
  year Int? 
  correctionUrl String?
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete:SetNull)
  subjectId String?
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavoriteSubject {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  createdAt DateTime @default(now())
  @@id([userId, subjectId])
}

enum AssessmentType {
  MINI_TEST
  TEST
  EXAM
  EXTRA
}

enum AssessmentPeriod {
  ONE
  TWO
  THREE
  EXTRA
}
enum LessonType {
  EXERCISE
  APPOINTAMENTS
}





enum Province {
  MAPUTO
  MAPUTO_CIDADE
  GAZA
  INHAMBANE
  SOFALA
  MANICA
  TETE
  NAMPULA
  ZAMBEZIA
  NIASSA
  CABO_DELGADO
}

enum Gender{
  MALE
  FEMALE
  NOT_SPECIFIED
}

