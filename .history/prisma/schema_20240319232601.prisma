// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user related tables
model User {
  id String @id @default(uuid())
  username String
  email String @unique
  provider  String?   
  providerUserId String?
  hash_password String?
  profile_image String?
  header_image String?
  verified_email Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedRt String?
  personalInfo PersonalInfo?
  collegeStudent CollegeStudentInfo?
  favoriteSubjects  UserFavoriteSubject[]
  favoriteLessons UserFavoriteLesson[]
  favoriteAssessmen UserFavoriteAssessment[]
  connectionsSent   Connection[] @relation("SentConnections")
  connectionsReceived   Connection[] @relation("ReceivedConnections")
  userDocuments UserDocument[]

}

model PersonalInfo {
  id String @id @default(uuid())
  user  User @relation(fields: [user_id], references: [id], onDelete: Cascade) 
  user_id String @unique 
  first_name String 
  last_name String
  gender Gender @default(NOT_SPECIFIED)
  province Province @default(MAPUTO)
  birth_date DateTime
}

model CollegeStudentInfo {
  id String @id @default(uuid())
  userId String? @unique
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  oauthUserId String? @unique
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  current_year Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, oauthUserId])
}
//school related tables
model School{
  id String @id @default(uuid())
  name String @unique
  acronime String? @unique
  logo String @unique
  address String?
  course Course[]
}
model Course{
  id String @id @default(uuid())
  name String 
  duration Int 
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjects Subject[]
  CollegeStudentInfo CollegeStudentInfo[]
  @@unique([id, schoolId])
}

model Subject{
  id String @id @default(uuid())
  name String 
  description String
  semester Int?
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
  assessments Assessment[] 
  favoriteSubjects  UserFavoriteSubject[]
  userDocuments UserDocument []
  @@unique([id, courseId])
}

model Lesson{
  id String @id @default(uuid())
  title String
  url String @unique
  summary String?
  author String?
  classType LessonType
  subjectId String?
  correctionUrl String?
  lists ListHasLesson[]
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull) 
  favoriteLessons UserFavoriteLesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Assessment{
  id String @id @default(uuid())
  url String @unique
  title String 
  type AssessmentType
  period AssessmentPeriod
  year Int? 
  correctionUrl String?
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete:SetNull)
  subjectId String?
  lists ListHasAssessment[]
  favoriteAssessment UserFavoriteAssessment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavoriteSubject {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  createdAt DateTime @default(now())
  @@id([userId, subjectId])
}

model UserDocument {
  id String @id @default(uuid())
  url String @unique
  title String 
  type UserDType
  userId String
  lists ListHasUserDocuments[]
  user User @relation(fields: [userId], references: [id], onDelete: NoAction )
  correctionUrl String?
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete:SetNull)
  subjectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavoriteLesson {
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  lesson_id String 
  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@id([user_id, lesson_id])
}
model UserFavoriteAssessment {
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  Assessment  Assessment @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  assessment_id String
  createdAt DateTime @default(now())
  @@id([user_id, assessment_id])
}

model Connection {
  sender      User @relation("SentConnections", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver    User @relation("ReceivedConnections", fields: [receiver_id], references:[id], onDelete: Cascade)
  sender_id String
  receiver_id String
  status Status 
  @@id([sender_id, receiver_id])
}

model Lists {
  id String @id @default(uuid())
  name String @unique
  listHasAssessment ListHasAssessment[]
  listHasLesson ListHasLesson[]
  listHasUserDocuments ListHasUserDocuments[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListHasAssessment {
  list_id String
  list Lists @relation(fields: [list_id], references: [id], onDelete: Cascade)
  assessment_id String
  assessment Assessment @relation(fields: [assessment_id], references: [id], onDelete: NoAction)
  @@id([list_id, assessment_id])
}
model ListHasLesson {
  list_id String
  list Lists @relation(fields: [list_id], references: [id], onDelete: Cascade)
  lesson_id String
  lesson Lesson? @relation(fields: [lesson_id], references: [id], onDelete: NoAction)
  @@id([list_id, lesson_id])
}

model ListHasUserDocuments {
  list_id String
  list Lists @relation(fields: [list_id], references: [id], onDelete: Cascade)
  userDocument_id String
  userDocument UserDocument @relation(fields: [userDocument_id], references: [id], onDelete: NoAction)
  @@id([list_id, userDocument_id])
}



enum AssessmentType {
  MINI_TEST
  TEST
  EXAM
  EXTRA
}

enum AssessmentPeriod {
  ONE
  TWO
  THREE
  EXTRA
}
enum LessonType {
  EXERCISE
  APPOINTAMENTS
}

enum UserDType {
  APPOINTAMENTS
  TESTS
  EXERCISES
  EXAM

}

enum Status {
  ACCEPTED
  PENDING
}



enum Province {
  MAPUTO
  MAPUTO_CIDADE
  GAZA
  INHAMBANE
  SOFALA
  MANICA
  TETE
  NAMPULA
  ZAMBEZIA
  NIASSA
  CABO_DELGADO
}

enum Gender{
  MALE
  FEMALE
  NOT_SPECIFIED
}

