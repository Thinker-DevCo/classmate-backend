// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String
  email String @unique
  hash_password String
  profile_image String?
  verified_email Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedRt String?
  personalInfo PersonalInfo?
  oauthUser OAuthUser?
  collegeStudent CollegeStudentInfo?
}

model PersonalInfo {
  id String @id @default(uuid())
  user  User @relation(fields: [user_id], references: [id], onDelete: Cascade) 
  user_id String @unique 
  first_name String 
  last_name String
  gender Gender @default(NOT_SPECIFIED)
  province Province @default(MAPUTO)
  birth_date DateTime
}
model CollegeStudentInfo {
  id String @id @default(uuid())
  userId String? @unique
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  oauthUserId String? @unique
  oAuthUser OAuthUser? @relation(fields: [oauthUserId], references: [id], onDelete: Cascade)
  courseId String
  current_year Int
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@unique([userId, oauthUserId])
}

model Course{
  id String @id @default(uuid())
  name String @unique
  duration Int 
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  CollegeStudentInfo CollegeStudentInfo[]
}

model School{
  id String @id @default(uuid())
  full_name String @unique
  acronime String? @unique
  location Json?
  address String?
  course Course[]
}

model OAuthUser {
  id        String     @id @default(uuid())
  provider  String   // Provider name, e.g., 'google'
  providerUserId String // Unique user ID from the OAuth provider
  email     String   @unique
  username String
  profile_image String?
  hashedRt String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationship with User
  user      User?  @relation(fields: [userId], references: [id])
  userId    String? @unique
  collegeStudent CollegeStudentInfo? 
}


enum Province {
  MAPUTO
  MAPUTO_CIDADE
  GAZA
  INHAMBANE
  SOFALA
  MANICA
  TETE
  NAMPULA
  ZAMBEZIA
  NIASSA
  CABO_DELGADO
}

enum Gender{
  MALE
  FEMALE
  NOT_SPECIFIED
}

